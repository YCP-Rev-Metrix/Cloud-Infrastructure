name: .NET

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
       publish:
         type: boolean
         description: 'Publish API to Digital Ocean'
         required: true
         default: false
       nuget:
         type: boolean
         description: 'Publish Client NuGet Package'
         required: true
         default: false

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/hosted-autogenerated'
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: build-artifacts
        path: ./Server/bin/Debug/net7.0/
    - name: Test
      run: dotnet test --no-build --verbosity normal

  publish-nuget:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.nuget
    steps:
      - name: Auto-increment version
        run: |
          cd ../
          echo "Current working directory: $(pwd)"
          ls -lR
          # Define the path to your .csproj files
          client_csproj_file="./Client/Client.csproj"
          common_csproj_file="./Common/Common.csproj"
          
          # Get the current version from the .csproj files
          client_current_version=$(grep -oPm1 "(?<=<Version>)[^<]+" "$client_csproj_file")
          common_current_version=$(grep -oPm1 "(?<=<Version>)[^<]+" "$common_csproj_file")
          
          #Ensure client version exists
          if [ -z "$client_current_version" ]; then
            echo "Error: Current client version not found in $client_csproj_file"
            exit 1
          fi
          
          #Ensure common version exists
          if [ -z "$common_current_version" ]; then
            echo "Error: Current common version not found in $common_csproj_file"
            exit 1
          fi
          
          #Ensure client and common versions are identical
          if [[ "$common_current_version" != "$client_current_version" ]]; then
            echo "Error: Client and Common versions are not the same"
            echo "Error: Client version: $client_current_version"
            echo "Error: Common version: $common_current_version"
            exit 1
          fi
          
          # Increment the versions as needed (e.g., patch version)
          IFS='.' read -r -a version_parts <<< "$client_current_version"
          new_patch=$((version_parts[2] + 1))
          new_version="${version_parts[0]}.${version_parts[1]}.$new_patch"
          
          # Update the .csproj files with the new version
          sed -i "s/<Version>$client_current_version<\/Version>/<Version>$new_version<\/Version>/" "$client_csproj_file"
          sed -i "s/<Version>$common_current_version<\/Version>/<Version>$new_version<\/Version>/" "$common_csproj_file"
        shell: bash
      - name: Generate NuGet
        run:  dotnet pack -p:IncludeReferencedProjects=true -c Release -o C:/clientpackage
      - name: Upload NuGet artifacts
        uses: actions/upload-artifact@v2
        with:
          name: pack-artifacts
          path: C:/clientpackage
      - name: Publish NuGet Package
        run: dotnet nuget push C:/clientpackage/*.nupkg --api-key ${{ secrets.API_KEY }} --source https://api.nuget.org/v3/index.json --no-symbols

  generate-swagger:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master' && github.event.inputs.publish
    steps:
    - name: Install Swashbuckle CLI
      run: dotnet tool install --global Swashbuckle.AspNetCore.Cli --version 6.5.0
    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: build-artifacts
        path: ./Server/bin/Debug/net7.0/
    - name: Generate OpenAPI document
      run: ~/.dotnet/tools/swagger tofile --output ./swagger.json ./Server/bin/Debug/net7.0/Server.dll v1
    - name: Upload OpenAPI document
      uses: actions/upload-artifact@v2
      with:
        name: OpenAPI
        path: ./swagger.json

  commit-swagger:
      name: Commit Swagger.json
      runs-on: ubuntu-latest
      needs: [generate-swagger]
      if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master'
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
          with:
            ref: 'hosted-autogenerated'
        - name: Download 'swagger.json' from artifacts
          uses: actions/download-artifact@v2
          with:
            name: OpenAPI
        - name: Configure Git
          run: |
            git config user.email "github-actions@github.com"
            git config user.name "GitHub Actions"
        - name: Move 'swagger.json' to 'swagger' directory
          run: mv swagger.json ./swagger/swagger.json
        - name: Commit and push changes
          run: |
            git add ./swagger/swagger.json
            git commit -m "Update swagger.json"
            git push origin hosted-autogenerated
            
  docker:
    name: Publish - Docker Hub
    runs-on: ubuntu-latest
    needs: [build]
    env:
      REPO: ${{ secrets.DOCKER_REPO }}
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master' && github.event.inputs.publish
    steps:
      - uses: actions/checkout@v1
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USER }} 
             -p '${{ secrets.DOCKER_PASS }}'
      - name: Build Docker image
        run: |
          echo "REPO - $REPO"
          echo "GITHUB_SHA (first 8 characters) - ${GITHUB_SHA::8}"
          docker build -t $REPO:latest -t $REPO:${GITHUB_SHA::8} .
      - name: Publish Docker image
        run: docker push $REPO

  redeploy:
    name: Redeploy webhook call
    runs-on: ubuntu-latest
    needs: [docker]
    steps:
      - name: Deploy docker container webhook
        uses: joelwmale/webhook-action@master
        env:
          WEBHOOK_URL: ${{ secrets.DEPLOY_WEBHOOK_URL  }}

  delay:
    runs-on: ubuntu-latest
    needs: [redeploy]
    steps:
    - name: Wait for 30 seconds
      run: sleep 30

  test-endpoint:
    runs-on: ubuntu-latest
    needs: [delay]
    steps:
    - name: Check Endpoint
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://api.revmetrix.io/api/Test/TestTime)
        if [ "$response" == "200" ]; then
          echo "Endpoint returned 200 OK"
          exit 0
        else
          echo "Endpoint returned $response"
          exit 1
        fi