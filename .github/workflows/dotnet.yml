name: .NET

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
        publish:
          type: boolean
          description: 'Publish API to Digital Ocean'
          required: true
          default: false
        nuget:
          type: boolean
          description: 'Publish Client NuGet Package'
          required: true
          default: false

jobs:
  build:
    runs-on: [self-hosted]
    if: github.ref != 'refs/heads/hosted-autogenerated'
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: build-artifacts
        path: ./Server/bin/Debug/net7.0/
    - name: Test
      run: dotnet test --no-build --verbosity normal --logger "trx;LogFileName=TestResults.trx"
    - name: Publish Unit Test Results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: .NET Test Results
        path: './ServerTests/TestResults/TestResults.trx,./ClientTests/TestResults/TestResults.trx,./DatabaseCoreTests/TestResults/TestResults.trx'
        reporter: dotnet-trx

  comment-build:
    runs-on: [self-hosted]
    needs: [build]
    steps:
    - name: Create commit comment if build passed
      if: ${{ needs.build.result == 'success' }}
      uses: peter-evans/commit-comment@v3
      with:
        body: |
          Build & Test Completed Successfully
    - name: Create commit comment if build failed
      if: ${{ needs.build.result == 'failure' }}
      uses: peter-evans/commit-comment@v3
      with:
        body: |
          Build & Test Failed

  publish-nuget:
    runs-on: [self-hosted]
    needs: [build]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.nuget == 'true' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Auto-increment version
        run: |
          # Define the path to your .csproj files
          client_csproj_file="./Client/Client.csproj"
          common_csproj_file="./Common/Common.csproj"
          
          # Get the current version from the .csproj files
          client_current_version=$(grep -oPm1 "(?<=<Version>)[^<]+" "$client_csproj_file")
          common_current_version=$(grep -oPm1 "(?<=<Version>)[^<]+" "$common_csproj_file")
          
          #Ensure client version exists
          if [ -z "$client_current_version" ]; then
            echo "Error: Current client version not found in $client_csproj_file"
            exit 1
          fi
          
          #Ensure common version exists
          if [ -z "$common_current_version" ]; then
            echo "Error: Current common version not found in $common_csproj_file"
            exit 1
          fi
          
          #Ensure client and common versions are identical
          if [[ "$common_current_version" != "$client_current_version" ]]; then
            echo "Error: Client and Common versions are not the same"
            echo "Error: Client version: $client_current_version"
            echo "Error: Common version: $common_current_version"
            exit 1
          fi
          
          # Increment the versions as needed (e.g., patch version)
          IFS='.' read -r -a version_parts <<< "$client_current_version"
          new_patch=$((version_parts[2] + 1))
          new_version="${version_parts[0]}.${version_parts[1]}.$new_patch"
          
          # Update the .csproj files with the new version
          sed -i "s/<Version>$client_current_version<\/Version>/<Version>$new_version<\/Version>/" "$client_csproj_file"
          sed -i "s/<Version>$common_current_version<\/Version>/<Version>$new_version<\/Version>/" "$common_csproj_file"
        shell: bash
      - name: Configure Git
        run: |
          git config user.email "github-actions@github.com"
          git config user.name "GitHub Actions"
      - name: Commit and push changes
        run: |
          git add ./Client/Client.csproj
          git add ./Common/Common.csproj
          git commit -m "Update Client and Common version: automated"
          git push origin ${{ github.ref }} || echo "No changes to commit"
      - name: Generate NuGet
        run:  dotnet pack -p:IncludeReferencedProjects=true -c Release -o C:/clientpackage
      - name: Upload NuGet artifacts
        uses: actions/upload-artifact@v2
        with:
          name: pack-artifacts
          path: C:/clientpackage
      - name: Publish NuGet Package
        run: dotnet nuget push C:/clientpackage/*.nupkg --api-key ${{ secrets.PACKAGES_PERSONAL_TOKEN }} -s https://nuget.pkg.github.com/YCP-Rev-Metrix/index.json --no-symbols --skip-duplicate

  comment-nuget:
    runs-on: [self-hosted]
    needs: [publish-nuget]
    steps:
    - name: Create commit comment if nuget passed
      if: ${{ needs.publish-nuget.result == 'success' }}
      uses: peter-evans/commit-comment@v3
      with:
        body: |
          Client NuGet Published Successfully
    - name: Create commit comment if nuget failed
      if: ${{ needs.publish-nuget.result == 'failure' }}
      uses: peter-evans/commit-comment@v3
      with:
        body: |
          Client NuGet Publish Failed

  generate-swagger:
    runs-on: [ubuntu-latest]
    needs: [build]
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master' && github.event.inputs.publish == 'true'
    steps:
    - name: Install Swashbuckle CLI
      run: dotnet tool update --global Swashbuckle.AspNetCore.Cli --version 6.5.0 || true
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Generate OpenAPI document
      run: ~/.dotnet/tools/swagger tofile --output ./swagger.json ./Server/bin/Debug/net7.0/Server.dll v1
    - name: Upload OpenAPI document
      uses: actions/upload-artifact@v2
      with:
        name: OpenAPI
        path: ./swagger.json
    - name: Configure Git
      run: |
        git config user.email "github-actions@github.com"
        git config user.name "GitHub Actions"
    - name: Commit and push changes
      run: |
         git add ./swagger.json
         git diff --staged --exit-code || echo "No changes to swagger.json"
         git diff-index --quiet HEAD || git commit -m "Update swagger.json"
         git push origin ${{ github.ref }} || echo "No changes to commit or push"
            
  docker:
    name: Publish - Docker Hub
    runs-on: [ubuntu-latest]
    needs: [build]
    env:
      REPO: ${{ secrets.DOCKER_REPO }}
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master' && github.event.inputs.publish == 'true'
    steps:
      - uses: actions/checkout@v1
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USER }} 
              -p '${{ secrets.DOCKER_PASS }}'
      - name: Build Docker image
        run: |
          echo "REPO - $REPO"
          echo "GITHUB_SHA (first 8 characters) - ${GITHUB_SHA::8}"
          docker build -t $REPO:latest -t $REPO:${GITHUB_SHA::8} .
      - name: Publish Docker image
        run: docker push $REPO

  redeploy:
    name: Redeploy webhook call
    runs-on: [self-hosted]
    needs: [docker]
    steps:
      - name: Deploy docker container webhook
        uses: joelwmale/webhook-action@master
        env:
          WEBHOOK_URL: ${{ secrets.DEPLOY_WEBHOOK_URL  }}

  delay:
    runs-on: [self-hosted]
    needs: [redeploy]
    steps:
    - name: Wait for 30 seconds
      run: sleep 30

  test-endpoint:
    runs-on: [self-hosted]
    needs: [delay]
    steps:
    - name: Check Endpoint
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://api.revmetrix.io/api/tests/TestTime)
        if [ "$response" == "200" ]; then
          echo "Endpoint returned 200 OK"
          exit 0
        else
          echo "Endpoint returned $response"
          exit 1
        fi
  trigger-deploy-workflow:
    runs-on: ubuntu-latest
    needs: [test-endpoint]
    steps:
    - name: Trigger Wiki Redeploy
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.PERS_ACC_TOK }}
        repository: YCP-Rev-Metrix/Wiki
        event-type: trigger-deploy
